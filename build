#!/usr/bin/env node
var fs = require('fs')
var path = require('path')
var cp = require('child_process')

var nopt = require('nopt')
var colors = require('colors')
var Promise = require('bluebird')

Promise.promisifyAll(fs)
var execAsync = Promise.promisify(cp.exec, {
  context: cp,
  multiArgs: true
})

var options = nopt({
  'input': Array,
  'all': Boolean
}, {
  'i': ['--input'],
  'a': ['--all', 'true']
}, process.argv, 2)

var tasksInfo = {}

var gruntTask = function (command, taskname, collect) {
  var command = ['grunt', [command, ':', taskname].join('')].join(' ')

  return execAsync(command, {cwd: path.join(process.cwd())})
    .then(function (args) {
      var result = null

      if (args.length == 3) {
        collect['[' + command + '] -- error'] = args[0]
      }

      if (args.length == 2) {
        collect['[' + command + '] -- stdout'] = args[0]
        collect['[' + command + '] -- stderr'] = args[1]
        result = taskname
      }

      return result
    })
}

var main = function (dirsInput) {
  console.log('Begin....'.magenta)

  var mainDir = path.join(process.cwd(), 'main')

  var dirsInput = dirsInput ? dirsInput.map(function (dirInput) {
    return dirInput.split('/')[1]
  }) : dirsInput

  fs.readdirAsync(mainDir)
    .filter(function (dir) {
      return fs.statAsync(path.join(mainDir, dir))
        .then(function (stat) {
          var exist = dirsInput ? dirsInput.indexOf(dir) > -1 : true
          return exist && stat.isDirectory()
        })
    })

    .then(function (dirs) {
      return dirs.map(function (dir) {
        return {
          taskname: dir,
          input: path.join(mainDir, dir, 'src'),
          output: path.join(mainDir, dir, 'build'),
        }
      })
    })

    .mapSeries(function (info) {
      console.log(('[Start] --- ' + info.taskname).yellow)

      var collect = tasksInfo[info.taskname] = {}

      var command = ['babel'].concat([info.input, '-d', info.output]).join(' ')

      var task = execAsync(command, {cwd: path.join(process.cwd())})
        .then(function (args) {
          var result = null

          if (args.length == 3) {
            collect['[babel] -- error'] = args[0]
          }

          if (args.length == 2) {
            collect['[babel] -- stdout'] = args[0]
            collect['[babel] -- stderr'] = args[1]
            result = info.taskname
          }

          return result
        })

        .then(function (taskname) {
          return taskname ? gruntTask('copy', taskname, collect) : null
        })

        .then(function (taskname) {
          return taskname ? gruntTask('clear', taskname, collect) : null
        })

        .then(function (taskname) {
          console.log(('[End] --- ' + taskname + '\n').green)
        })

      return task
    })

    .then(function () {
      console.log('------------------------------------------------------'.white)

      Object.keys(tasksInfo).forEach(function (taskname) {
        var info = tasksInfo[taskname]

        Object.keys(info).forEach(function (key) {
          if (info[key].length) {
            var msg = ['[', taskname, '] -- ', key, ':\n'].join('')

            console.log(colors['magenta'](msg))
            console.log(colors['green'](info[key]))
          }
        })

        console.log('------------------------------------------------------'.white)
      })
    })
}

if (options.all) {
  main()
}
else if (options.input.length) {
  main(options.input)
}
else {
  console.log('Need input less file'.red)
}